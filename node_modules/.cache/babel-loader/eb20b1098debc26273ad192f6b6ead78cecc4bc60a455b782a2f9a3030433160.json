{"ast":null,"code":"var _s = $RefreshSig$();\n// HandleAuth.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport CryptoJS from 'crypto-js';\n\n// It's recommended to move sensitive information like your secretKey to environment variables.\nconst secretKey = 'a0c2b1ab664e5ea5ca735d57f4cdaaf8';\nconst HandleAuth = () => {\n  _s();\n  const [userID, setUserID] = useState(localStorage.getItem('userID'));\n  const [error, setError] = useState(null);\n  const encrypt = useCallback(text => {\n    return CryptoJS.AES.encrypt(text, secretKey).toString();\n  }, []);\n  const decrypt = useCallback(ciphertext => {\n    const bytes = CryptoJS.AES.decrypt(ciphertext, secretKey);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  }, []);\n  const setAuth = useCallback(token => {\n    const encryptedToken = encrypt(token);\n    sessionStorage.setItem('authToken', encryptedToken);\n    fetchUserName();\n  }, [encrypt]);\n  const getAuth = useCallback(() => userID, [userID]);\n  const fetchUserName = useCallback(async () => {\n    const encryptedToken = sessionStorage.getItem('authToken');\n    const token = encryptedToken ? decrypt(encryptedToken) : null;\n    const apiKey = '053905e1fc8b0de378dc341a24ec68c7';\n    if (token) {\n      const paramsString = `api_key=${apiKey}&token=${token}`;\n      const apiSig = CryptoJS.MD5(paramsString + secretKey).toString();\n      const url = `https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=${token}&api_key=${apiKey}&api_sig=${apiSig}&format=json`;\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.session && data.session.name) {\n          setUserID(data.session.name); // This sets the state.\n          localStorage.setItem('userID', data.session.name); // This persists the ID across sessions.\n          sessionStorage.setItem('userID', data.session.name); // Optional: for single session storage.\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch session:\", error);\n        setError(error instanceof Error ? error.message : String(error));\n      }\n    }\n  }, [decrypt, setUserID, setError]);\n\n  // Effect to initiate user name fetch upon component mount or token change.\n  useEffect(() => {\n    if (!userID) {\n      fetchUserName();\n    }\n  }, [userID, fetchUserName]);\n  return {\n    getAuth,\n    setAuth,\n    userID,\n    error\n  };\n};\n_s(HandleAuth, \"TVD+tL7jKZhA80IlCiyW2b5W0UQ=\");\n_c = HandleAuth;\nexport default HandleAuth;\nvar _c;\n$RefreshReg$(_c, \"HandleAuth\");","map":{"version":3,"names":["useState","useEffect","useCallback","CryptoJS","secretKey","HandleAuth","_s","userID","setUserID","localStorage","getItem","error","setError","encrypt","text","AES","toString","decrypt","ciphertext","bytes","enc","Utf8","setAuth","token","encryptedToken","sessionStorage","setItem","fetchUserName","getAuth","apiKey","paramsString","apiSig","MD5","url","response","fetch","ok","Error","status","data","json","session","name","console","message","String","_c","$RefreshReg$"],"sources":["C:/Users/jules/source/repos/jaykang98/jaze/src/utils/HandleAuth.ts"],"sourcesContent":["// HandleAuth.ts\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport CryptoJS from 'crypto-js';\r\n\r\n// It's recommended to move sensitive information like your secretKey to environment variables.\r\nconst secretKey = 'a0c2b1ab664e5ea5ca735d57f4cdaaf8';\r\n\r\nconst HandleAuth = () => {\r\n    const [userID, setUserID] = useState<string | null>(localStorage.getItem('userID'));\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const encrypt = useCallback((text: string): string => {\r\n        return CryptoJS.AES.encrypt(text, secretKey).toString();\r\n    }, []);\r\n\r\n    const decrypt = useCallback((ciphertext: string): string => {\r\n        const bytes = CryptoJS.AES.decrypt(ciphertext, secretKey);\r\n        return bytes.toString(CryptoJS.enc.Utf8);\r\n    }, []);\r\n\r\n    const setAuth = useCallback((token: string) => {\r\n        const encryptedToken = encrypt(token);\r\n        sessionStorage.setItem('authToken', encryptedToken);\r\n        fetchUserName();\r\n    }, [encrypt]);\r\n\r\n    const getAuth = useCallback(() => userID, [userID]);\r\n\r\n    const fetchUserName = useCallback(async () => {\r\n        const encryptedToken = sessionStorage.getItem('authToken');\r\n        const token = encryptedToken ? decrypt(encryptedToken) : null;\r\n        const apiKey = '053905e1fc8b0de378dc341a24ec68c7';\r\n\r\n        if (token) {\r\n            const paramsString = `api_key=${apiKey}&token=${token}`;\r\n            const apiSig = CryptoJS.MD5(paramsString + secretKey).toString();\r\n            const url = `https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=${token}&api_key=${apiKey}&api_sig=${apiSig}&format=json`;\r\n\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (data.session && data.session.name) {\r\n                    setUserID(data.session.name); // This sets the state.\r\n                    localStorage.setItem('userID', data.session.name); // This persists the ID across sessions.\r\n                    sessionStorage.setItem('userID', data.session.name); // Optional: for single session storage.\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch session:\", error);\r\n                setError(error instanceof Error ? error.message : String(error));\r\n            }\r\n        }\r\n    }, [decrypt, setUserID, setError]);\r\n\r\n    // Effect to initiate user name fetch upon component mount or token change.\r\n    useEffect(() => {\r\n        if (!userID) {\r\n            fetchUserName();\r\n        }\r\n    }, [userID, fetchUserName]);\r\n\r\n    return { getAuth, setAuth, userID, error };\r\n};\r\n\r\nexport default HandleAuth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}