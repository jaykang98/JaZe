{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport CryptoJS from 'crypto-js';\nconst secretKey = 'a0c2b1ab664e5ea5ca735d57f4cdaaf8';\nconst HandleAuthContext = /*#__PURE__*/createContext(undefined);\nexport const HandleAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userID, setUserID] = useState(localStorage.getItem('userID'));\n  const [error, setError] = useState(null);\n  const encrypt = useCallback(text => CryptoJS.AES.encrypt(text, secretKey).toString(), []);\n  const decrypt = useCallback(ciphertext => {\n    const bytes = CryptoJS.AES.decrypt(ciphertext, secretKey);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  }, []);\n  const setAuth = useCallback(token => {\n    const encryptedToken = encrypt(token);\n    sessionStorage.setItem('authToken', encryptedToken);\n    fetchUserName();\n  }, [encrypt]);\n  const getAuth = useCallback(() => userID, [userID]);\n  const fetchUserName = useCallback(async () => {\n    const encryptedToken = sessionStorage.getItem('authToken');\n    const token = encryptedToken ? decrypt(encryptedToken) : null;\n    const apiKey = '053905e1fc8b0de378dc341a24ec68c7';\n    if (token) {\n      const paramsString = `api_key=${apiKey}&token=${token}`;\n      const apiSig = CryptoJS.MD5(paramsString + secretKey).toString();\n      const url = `https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=${token}&api_key=${apiKey}&api_sig=${apiSig}&format=json`;\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.session && data.session.name) {\n          setUserID(data.session.name);\n          localStorage.setItem('userID', data.session.name);\n          sessionStorage.setItem('userID', data.session.name);\n        }\n      } catch (error) {\n        setError(error instanceof Error ? error.message : String(error));\n      }\n    }\n  }, [decrypt, setUserID, setError]);\n  useEffect(() => {\n    if (!userID) {\n      fetchUserName();\n    }\n  }, [userID, fetchUserName]);\n};\n_s(HandleAuthProvider, \"TVD+tL7jKZhA80IlCiyW2b5W0UQ=\");\n_c = HandleAuthProvider;\nvar _c;\n$RefreshReg$(_c, \"HandleAuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","CryptoJS","secretKey","HandleAuthContext","undefined","HandleAuthProvider","children","_s","userID","setUserID","localStorage","getItem","error","setError","encrypt","text","AES","toString","decrypt","ciphertext","bytes","enc","Utf8","setAuth","token","encryptedToken","sessionStorage","setItem","fetchUserName","getAuth","apiKey","paramsString","apiSig","MD5","url","response","fetch","ok","Error","status","data","json","session","name","message","String","_c","$RefreshReg$"],"sources":["C:/Users/jules/source/repos/jaykang98/jaze/src/utils/HandleAuth.ts"],"sourcesContent":["import { createContext, useState, useEffect, useCallback, useContext } from 'react';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst secretKey = 'a0c2b1ab664e5ea5ca735d57f4cdaaf8';\r\n\r\nconst HandleAuthContext = createContext<{\r\n    userID: string | null;\r\n    error: string | null;\r\n    getAuth: () => string | null;\r\n    setAuth: (token: string) => void;\r\n    checkAndModifyDOMBasedOnUser: () => void; // New function to handle DOM manipulation\r\n} | undefined>(undefined);\r\n\r\nexport const HandleAuthProvider = ({ children }: { children: React.ReactNode }) => {\r\n    const [userID, setUserID] = useState<string | null>(localStorage.getItem('userID'));\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const encrypt = useCallback((text: string): string => CryptoJS.AES.encrypt(text, secretKey).toString(), []);\r\n\r\n    const decrypt = useCallback((ciphertext: string): string => {\r\n        const bytes = CryptoJS.AES.decrypt(ciphertext, secretKey);\r\n        return bytes.toString(CryptoJS.enc.Utf8);\r\n    }, []);\r\n\r\n    const setAuth = useCallback((token: string) => {\r\n        const encryptedToken = encrypt(token);\r\n        sessionStorage.setItem('authToken', encryptedToken);\r\n        fetchUserName();\r\n    }, [encrypt]);\r\n    const getAuth = useCallback(() => userID, [userID]);\r\n    const fetchUserName = useCallback(async () => {\r\n        const encryptedToken = sessionStorage.getItem('authToken');\r\n        const token = encryptedToken ? decrypt(encryptedToken) : null;\r\n        const apiKey = '053905e1fc8b0de378dc341a24ec68c7';\r\n\r\n        if (token) {\r\n            const paramsString = `api_key=${apiKey}&token=${token}`;\r\n            const apiSig = CryptoJS.MD5(paramsString + secretKey).toString();\r\n            const url = `https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=${token}&api_key=${apiKey}&api_sig=${apiSig}&format=json`;\r\n\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (data.session && data.session.name) {\r\n                    setUserID(data.session.name);\r\n                    localStorage.setItem('userID', data.session.name);\r\n                    sessionStorage.setItem('userID', data.session.name);\r\n                }\r\n            } catch (error) {\r\n                setError(error instanceof Error ? error.message : String(error));\r\n            }\r\n        }\r\n    }, [decrypt, setUserID, setError]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userID) {\r\n            fetchUserName();\r\n        }\r\n    }, [userID, fetchUserName]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}