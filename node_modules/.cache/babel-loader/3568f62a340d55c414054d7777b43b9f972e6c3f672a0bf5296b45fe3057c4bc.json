{"ast":null,"code":"// HandleAuth.ts\nimport{useState,useEffect,useCallback}from'react';import CryptoJS from'crypto-js';// It's recommended to move sensitive information like your secretKey to environment variables.\nconst secretKey='a0c2b1ab664e5ea5ca735d57f4cdaaf8';const HandleAuth=()=>{const[userID,setUserID]=useState(localStorage.getItem('userID'));const[error,setError]=useState(null);const encrypt=useCallback(text=>{return CryptoJS.AES.encrypt(text,secretKey).toString();},[]);const decrypt=useCallback(ciphertext=>{const bytes=CryptoJS.AES.decrypt(ciphertext,secretKey);return bytes.toString(CryptoJS.enc.Utf8);},[]);const setAuth=useCallback(token=>{const encryptedToken=encrypt(token);sessionStorage.setItem('authToken',encryptedToken);fetchUserName();},[encrypt]);const getAuth=useCallback(()=>userID,[userID]);const fetchUserName=useCallback(async()=>{const encryptedToken=sessionStorage.getItem('authToken');const token=encryptedToken?decrypt(encryptedToken):null;const apiKey='053905e1fc8b0de378dc341a24ec68c7';if(token){const paramsString=\"api_key=\".concat(apiKey,\"&token=\").concat(token);const apiSig=CryptoJS.MD5(paramsString+secretKey).toString();const url=\"https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=\".concat(token,\"&api_key=\").concat(apiKey,\"&api_sig=\").concat(apiSig,\"&format=json\");try{const response=await fetch(url);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();if(data.session&&data.session.name){setUserID(data.session.name);// This sets the state.\nlocalStorage.setItem('userID',data.session.name);// This persists the ID across sessions.\nsessionStorage.setItem('userID',data.session.name);// Optional: for single session storage.\n}}catch(error){console.error(\"Failed to fetch session:\",error);setError(error instanceof Error?error.message:String(error));}}},[decrypt,setUserID,setError]);// Effect to initiate user name fetch upon component mount or token change.\nuseEffect(()=>{if(!userID){fetchUserName();}},[userID,fetchUserName]);return{getAuth,setAuth,userID,error};};export default HandleAuth;","map":{"version":3,"names":["useState","useEffect","useCallback","CryptoJS","secretKey","HandleAuth","userID","setUserID","localStorage","getItem","error","setError","encrypt","text","AES","toString","decrypt","ciphertext","bytes","enc","Utf8","setAuth","token","encryptedToken","sessionStorage","setItem","fetchUserName","getAuth","apiKey","paramsString","concat","apiSig","MD5","url","response","fetch","ok","Error","status","data","json","session","name","console","message","String"],"sources":["C:/Users/jules/source/repos/jaykang98/jaze/src/utils/HandleAuth.ts"],"sourcesContent":["// HandleAuth.ts\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport CryptoJS from 'crypto-js';\r\n\r\n// It's recommended to move sensitive information like your secretKey to environment variables.\r\nconst secretKey = 'a0c2b1ab664e5ea5ca735d57f4cdaaf8';\r\n\r\nconst HandleAuth = () => {\r\n    const [userID, setUserID] = useState<string | null>(localStorage.getItem('userID'));\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const encrypt = useCallback((text: string): string => {\r\n        return CryptoJS.AES.encrypt(text, secretKey).toString();\r\n    }, []);\r\n\r\n    const decrypt = useCallback((ciphertext: string): string => {\r\n        const bytes = CryptoJS.AES.decrypt(ciphertext, secretKey);\r\n        return bytes.toString(CryptoJS.enc.Utf8);\r\n    }, []);\r\n\r\n    const setAuth = useCallback((token: string) => {\r\n        const encryptedToken = encrypt(token);\r\n        sessionStorage.setItem('authToken', encryptedToken);\r\n        fetchUserName();\r\n    }, [encrypt]);\r\n\r\n    const getAuth = useCallback(() => userID, [userID]);\r\n\r\n    const fetchUserName = useCallback(async () => {\r\n        const encryptedToken = sessionStorage.getItem('authToken');\r\n        const token = encryptedToken ? decrypt(encryptedToken) : null;\r\n        const apiKey = '053905e1fc8b0de378dc341a24ec68c7';\r\n\r\n        if (token) {\r\n            const paramsString = `api_key=${apiKey}&token=${token}`;\r\n            const apiSig = CryptoJS.MD5(paramsString + secretKey).toString();\r\n            const url = `https://ws.audioscrobbler.com/2.0/?method=auth.getSession&token=${token}&api_key=${apiKey}&api_sig=${apiSig}&format=json`;\r\n\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (data.session && data.session.name) {\r\n                    setUserID(data.session.name); // This sets the state.\r\n                    localStorage.setItem('userID', data.session.name); // This persists the ID across sessions.\r\n                    sessionStorage.setItem('userID', data.session.name); // Optional: for single session storage.\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch session:\", error);\r\n                setError(error instanceof Error ? error.message : String(error));\r\n            }\r\n        }\r\n    }, [decrypt, setUserID, setError]);\r\n\r\n    // Effect to initiate user name fetch upon component mount or token change.\r\n    useEffect(() => {\r\n        if (!userID) {\r\n            fetchUserName();\r\n        }\r\n    }, [userID, fetchUserName]);\r\n\r\n    return { getAuth, setAuth, userID, error };\r\n};\r\n\r\nexport default HandleAuth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}