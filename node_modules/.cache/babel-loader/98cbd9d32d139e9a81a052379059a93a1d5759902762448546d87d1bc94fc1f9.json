{"ast":null,"code":"import { randomBytes, createCipheriv, createDecipheriv } from 'crypto';\nconst secretKey = Buffer.from('YOUR_SECRET_KEY', 'hex'); // Ensure your key is of proper length for AES-256\nconst algorithm = 'aes-256-ctr';\nexport const encrypt = text => {\n  const iv = randomBytes(16);\n  const cipher = createCipheriv(algorithm, secretKey, iv);\n  const encrypted = Buffer.concat([cipher.update(text, 'utf8'), cipher.final()]);\n  return {\n    iv: iv.toString('hex'),\n    content: encrypted.toString('hex')\n  };\n};\nexport const decrypt = hash => {\n  const iv = Buffer.from(hash.iv, 'hex');\n  const decipher = createDecipheriv(algorithm, secretKey, iv);\n  const decrypted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);\n  return decrypted.toString('utf8');\n};","map":{"version":3,"names":["randomBytes","createCipheriv","createDecipheriv","secretKey","Buffer","from","algorithm","encrypt","text","iv","cipher","encrypted","concat","update","final","toString","content","decrypt","hash","decipher","decrypted"],"sources":["C:/Users/jacob/Source/Repos/jaze2/src/utils/encryption.ts"],"sourcesContent":["import { randomBytes, createCipheriv, createDecipheriv } from 'crypto';\r\n\r\nconst secretKey: Buffer = Buffer.from('YOUR_SECRET_KEY', 'hex'); // Ensure your key is of proper length for AES-256\r\nconst algorithm: string = 'aes-256-ctr';\r\n\r\ninterface EncryptedData {\r\n  iv: string;\r\n  content: string;\r\n}\r\n\r\nexport const encrypt = (text: string): EncryptedData => {\r\n  const iv = randomBytes(16);\r\n  const cipher = createCipheriv(algorithm, secretKey, iv);\r\n  const encrypted = Buffer.concat([cipher.update(text, 'utf8'), cipher.final()]);\r\n\r\n  return {\r\n    iv: iv.toString('hex'),\r\n    content: encrypted.toString('hex'),\r\n  };\r\n};\r\n\r\nexport const decrypt = (hash: EncryptedData): string => {\r\n  const iv = Buffer.from(hash.iv, 'hex');\r\n  const decipher = createDecipheriv(algorithm, secretKey, iv);\r\n  const decrypted = Buffer.concat([\r\n    decipher.update(Buffer.from(hash.content, 'hex')),\r\n    decipher.final(),\r\n  ]);\r\n\r\n  return decrypted.toString('utf8');\r\n};\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,QAAQ;AAEtE,MAAMC,SAAiB,GAAGC,MAAM,CAACC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC,CAAC;AACjE,MAAMC,SAAiB,GAAG,aAAa;AAOvC,OAAO,MAAMC,OAAO,GAAIC,IAAY,IAAoB;EACtD,MAAMC,EAAE,GAAGT,WAAW,CAAC,EAAE,CAAC;EAC1B,MAAMU,MAAM,GAAGT,cAAc,CAACK,SAAS,EAAEH,SAAS,EAAEM,EAAE,CAAC;EACvD,MAAME,SAAS,GAAGP,MAAM,CAACQ,MAAM,CAAC,CAACF,MAAM,CAACG,MAAM,CAACL,IAAI,EAAE,MAAM,CAAC,EAAEE,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;EAE9E,OAAO;IACLL,EAAE,EAAEA,EAAE,CAACM,QAAQ,CAAC,KAAK,CAAC;IACtBC,OAAO,EAAEL,SAAS,CAACI,QAAQ,CAAC,KAAK;EACnC,CAAC;AACH,CAAC;AAED,OAAO,MAAME,OAAO,GAAIC,IAAmB,IAAa;EACtD,MAAMT,EAAE,GAAGL,MAAM,CAACC,IAAI,CAACa,IAAI,CAACT,EAAE,EAAE,KAAK,CAAC;EACtC,MAAMU,QAAQ,GAAGjB,gBAAgB,CAACI,SAAS,EAAEH,SAAS,EAAEM,EAAE,CAAC;EAC3D,MAAMW,SAAS,GAAGhB,MAAM,CAACQ,MAAM,CAAC,CAC9BO,QAAQ,CAACN,MAAM,CAACT,MAAM,CAACC,IAAI,CAACa,IAAI,CAACF,OAAO,EAAE,KAAK,CAAC,CAAC,EACjDG,QAAQ,CAACL,KAAK,CAAC,CAAC,CACjB,CAAC;EAEF,OAAOM,SAAS,CAACL,QAAQ,CAAC,MAAM,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}