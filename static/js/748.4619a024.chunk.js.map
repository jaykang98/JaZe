{"version":3,"file":"static/js/748.4619a024.chunk.js","mappings":"+LAeA,MAqFA,EArFkDA,IAAiB,IAAhB,OAAEC,GAAQD,EAC3D,MAAM,SAAEE,EAAQ,WAAEC,IAAeC,EAAAA,EAAAA,GAAcH,GAuDzCI,EArDiBC,MACrB,IAAKJ,IAAaA,EAASK,KAAM,OAAO,KACxC,MAAM,KAAEA,GAASL,EACXM,EAAmB,IAAIC,KAAgC,IAA3BF,EAAKG,WAAWC,UAC5CC,EAAc,IAAIH,KACxB,IAAII,EACFD,EAAYE,cAAgBN,EAAiBM,cAC/C,MAAMC,EACJH,EAAYI,WAAaR,EAAiBQ,YAE1CD,EAAmB,GACG,IAArBA,GACCH,EAAYK,UAAYT,EAAiBS,YAE3CJ,IAGF,MAAMK,EAAiB,CACrB,EACEC,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMC,EAAAA,MAAgB,WAEzCjB,EAAKkB,MAEP,EACEN,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMG,EAAAA,MAAmB,cAE5CnB,EAAKoB,SAEP,EACER,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMK,EAAAA,MAAiB,iBAE1CpB,EAAiBqB,sBAEnB,EACEV,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMK,EAAAA,MAAiB,mBAClC,GAADE,OACJjB,EAAsB,WAE3B,EACEM,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMQ,EAAAA,MAAW,gBAEpCC,OAAOzB,EAAK0B,WAAWC,mBAI3B,OAAOb,EAAAA,EAAAA,KAACc,EAAAA,EAAY,CAACC,KAAMlB,GAAkB,EAGvBZ,GAClB+B,GACJlB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eAAe,+JAMjBkB,GACJnB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BAA6B,+JAOrC,OACEC,EAAAA,EAAAA,KAACkB,EAAAA,EAAW,CACVC,MAAM,QACNvC,OAAQA,EACRwC,eAAgBJ,EAChBK,kBAAmBrC,EACnBiC,iBAAkBA,GAClB,C,gDC/FN,SAAgB,SAAW,oCCA3B,EAAqC,sCAArC,EAAuF,6BAAvF,EAAiI,8BAAjI,EAA2K,6BAA3K,EAAmN,4BAAnN,EAAyP,2BAAzP,EAAuS,oCAAvS,EAA0V,gC,iCCQ1V,MAkDA,EAlD4CtC,IAAiB,IAAD2C,EAAAC,EAAAC,EAAA,IAAf,OAAE5C,GAAQD,EACrD,MAAM,SAAEE,EAAQ,QAAE4C,IAAY1C,EAAAA,EAAAA,GAAcH,IACtC,OAAE8C,IAAWC,EAAAA,EAAAA,KACbC,EAAoB,OAAR/C,QAAQ,IAARA,GAAc,QAANyC,EAARzC,EAAUK,YAAI,IAAAoC,GAAO,QAAPC,EAAdD,EAAgBO,aAAK,IAAAN,OAAb,EAARA,EAAwB,GAAG,UACtCO,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAM3C,OAAIP,GACKzB,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,EAAgBnC,SAAC,gBAIxCD,EAAAA,EAAAA,MAAA,OACEmC,UAAWC,EACXC,aAAcA,IAAMJ,GAAa,GACjCK,aAAcA,IAAML,GAAa,GAAOhC,SAAA,EAExCC,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,IACftD,GACCkB,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAAtC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAKmC,UAAWC,EAAiBnC,SAAA,CAC9B6B,IACC5B,EAAAA,EAAAA,KAAA,OAAKsC,IAAKV,EAAWW,IAAI,OAAON,UAAWC,KAE7CpC,EAAAA,EAAAA,MAAA,OAAKmC,UAAWC,EAAgBnC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,QAAMiC,UAAWC,EAAkBnC,SAAEnB,KACrCoB,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAAD,SAAe,OAARlB,QAAQ,IAARA,GAAc,QAAN2C,EAAR3C,EAAUK,YAAI,IAAAsC,OAAN,EAARA,EAAgBgB,YACvBxC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAMiC,UAAWC,EAAenC,SAAC,qBAGpC+B,IACC9B,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,EAAqBO,QA9B3BC,KAClBhB,GAAQ,EA6B0D3B,SAAC,gBAM/DC,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,EAAiBnC,UAC/BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,0BAGN,EC7BV,EAhB0DpB,IAGnD,IAHoD,MACzDwC,EAAK,OACLvC,GACDD,EACC,OACEmB,EAAAA,EAAAA,MAAA,OAAKmC,UAAWC,EAAOS,SAAS5C,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKoB,OAEPnB,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,EAAOU,mBAAmB7C,UACxCC,EAAAA,EAAAA,KAAC6C,EAAS,CAACjE,OAAQA,QAEjB,ECrBV,EAA4B,6BCA5B,EAA8B,iCCW9B,EARgDD,IAA0B,IAAzB,SAAEoB,EAAQ,MAAE+C,GAAOnE,EAClE,OACEqB,EAAAA,EAAAA,KAAA,OAAKiC,UAAWC,EAAoBY,MAAOA,EAAM/C,SAC9CA,GACG,EC2CV,EA9C4CpB,IAGrC,IAHsC,SAC3CoB,EAAQ,gBACRgD,EAAkB,IACnBpE,EACC,MAAMqE,GAAeC,EAAAA,EAAAA,QAAuB,OACrCC,EAAeC,IAAoBnB,EAAAA,EAAAA,UAASe,GAC7CK,EAAgBC,EAAAA,SAAeC,QAAQvD,GAAUwD,MAAM,EAAG,GA4BhE,OA1BAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAwBA,KAC5B,GAAIT,EAAaU,QAAS,CACxB,MAAMC,EAAiBX,EAAaU,QAAQE,YACtCC,EAAgB,IAChBC,EAAgB,KACtB,IAAIC,EAAWhB,EAEXY,GAAkBZ,EAAkB,KAAOc,EAC7CE,EAAYF,EAAgBF,EAAkB,IACrCA,GAAkBZ,EAAkB,KAAOe,IACpDC,EAAYD,EAAgBH,EAAkB,KAGhDR,EAAiBY,EACnB,GAMF,OAHAN,IACAO,OAAOC,iBAAiB,SAAUR,GAE3B,KACLO,OAAOE,oBAAoB,SAAUT,EAAsB,CAC5D,GACA,CAACV,KAGFjD,EAAAA,EAAAA,MAAA,OAAKqE,IAAKnB,EAAcf,UAAWC,EAAiBnC,SAAA,EAClDC,EAAAA,EAAAA,KAACoE,EAAW,CAACtB,MAAO,CAAEuB,MAAM,GAAD5D,OAAKyC,EAAa,MAAMnD,SAChDqD,EAAc,MAEjBpD,EAAAA,EAAAA,KAACoE,EAAW,CAACtB,MAAO,CAAEuB,MAAM,GAAD5D,OAAK,IAAMyC,EAAa,MAAMnD,SACtDqD,EAAc,OAEb,ECNV,EA1BgDzE,IASzC,IAT0C,OAC/CC,EAAM,eACNwC,EAAc,kBACdC,EAAiB,iBACjBJ,EAAgB,oBAChBqD,EAAmB,MACnBnD,EAAK,aACLoD,EAAe,GAAE,eACjBC,EAAiB,IAClB7F,EACC,OACEmB,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAAtC,SAAA,EACEC,EAAAA,EAAAA,KAACyE,EAAQ,CAAC7F,OAAQA,EAAQuC,MAAOA,KACjCrB,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACED,EAAAA,EAAAA,MAAC4E,EAAS,CAAC3B,gBAAiBwB,EAAaxE,SAAA,CACtCqB,EACAC,MAEHvB,EAAAA,EAAAA,MAAC4E,EAAS,CAAC3B,gBAAiByB,EAAezE,SAAA,CACxCkB,EACAqD,UAGJ,C,yCCrCP,QAAwB,4BAAxB,EAA2D,2BAA3D,EAAuI,+B,aCSvI,MAyBA,EAzB2C3F,IAAe,IAAd,KAAEoC,GAAMpC,EAClD,OAAoB,IAAhBoC,EAAK4D,QAAiB5D,EAAK4D,OAAS,GAAwB,IAAnB5D,EAAK,GAAG4D,QAC5C3E,EAAAA,EAAAA,KAAA,OAAAD,SAAK,uBAIZC,EAAAA,EAAAA,KAAA,SAAOiC,UAAWC,EAAanC,UAC7BC,EAAAA,EAAAA,KAAA,SAAAD,SACGgB,EAAK6D,KAAI,CAACC,EAAKC,KACd9E,EAAAA,EAAAA,KAAA,MAAAD,SACG8E,EAAID,KAAI,CAACG,EAAMC,KACdhF,EAAAA,EAAAA,KAAA,MAEEiC,UAAS,GAAAxB,OAAKyB,EAAW,KAAAzB,OAAkB,IAAduE,EAAkB9C,EAAkB,IAAKnC,SAErEgF,GAAI,QAAAtE,OAHQqE,EAAQ,KAAArE,OAAIuE,OAK3B,OAAAvE,OARYqE,SAYd,C,gDC5BL,MAAMG,EAAsBC,MACjCC,EACAC,KAEA,IACE,MAAMC,QCRHH,eACLC,EACAC,GAEA,MAAME,EAAc,IAAIC,gBAAgB,IACnCH,EACHI,QAASC,mCACTC,OAAQ,SACPC,WAEGC,EAAG,GAAAnF,OAAMgF,oCAA6B,YAAAhF,OAAW0E,EAAM,KAAA1E,OAAI6E,GAEjE,IACE,MAAMD,QAAiBQ,MAAMD,GAC7B,IAAKP,EAASS,GACZ,MAAM,IAAIC,MAAM,gCAADtF,OAAiC4E,EAASW,aAE3D,aAAcX,EAASY,MACzB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,wBAAyBA,GACjCA,CACR,CACF,CDd2BE,CAAUjB,EAAQC,GACzC,OAAOC,CACT,CAAE,MAAOa,GAEP,MADAC,QAAQD,MAAM,sCAAuCA,GAC/CA,CACR,GEPWnH,EAAiBsH,IAC5B,MAAOxH,EAAUyH,IAAetE,EAAAA,EAAAA,UAA0B,OACnDuE,EAAWC,IAAgBxE,EAAAA,EAAAA,UAA2B,OACtDlD,EAAY2H,IAAiBzE,EAAAA,EAAAA,UAA4B,OACzD0E,EAAWC,IAAgB3E,EAAAA,EAAAA,UAA2B,OACtDkE,EAAOU,IAAY5E,EAAAA,EAAAA,UAAwB,OAC3CP,EAASoF,IAAc7E,EAAAA,EAAAA,WAAS,GAyEvC,OAvEAwB,EAAAA,EAAAA,YAAU,KACR,IAAK6C,EAEH,YADAQ,GAAW,GAIb,MAAMC,EAAe,YAAArG,OAAe4F,GAC9BU,EAAaC,aAAaC,QAAQH,GAExC,GAAIC,EAAY,CACd,MAAM,SAAElI,EAAQ,UAAE0H,EAAS,WAAEzH,EAAU,UAAE4H,GACvCQ,KAAKC,MAAMJ,GACbT,EAAYzH,GACZ2H,EAAaD,GACbE,EAAc3H,GACd6H,EAAaD,GACbG,GAAW,EACb,KAAO,CACL,MAAMT,EAAYlB,UAChB2B,GAAW,GACX,IACE,MAAMO,EAAkBnC,EAAoB,eAAgB,CAC1D/F,KAAMmH,IAEFgB,EAAuBpC,EAC3B,oBACA,CAAE/F,KAAMmH,EAAUiB,MAAO,IAErBC,EAAwBtC,EAC5B,qBACA,CAAE/F,KAAMmH,EAAUiB,MAAO,IAErBE,EAAuBvC,EAC3B,oBACA,CAAE/F,KAAMmH,EAAUiB,MAAO,KAGpBG,EAAUC,EAAeC,EAAgBC,SACxCC,QAAQC,IAAI,CAChBV,EACAC,EACAE,EACAC,IAGJlB,EAAYmB,GACZjB,EAAakB,GACbjB,EAAckB,GACdhB,EAAaiB,GAEbZ,aAAae,QACXjB,EACAI,KAAKc,UAAU,CACbnJ,SAAU4I,EACVlB,UAAWmB,EACX5I,WAAY6I,EACZjB,UAAWkB,IAGjB,CAAE,MAAO1B,GACPC,QAAQD,MAAM,4BAA6BA,GAC3CU,EAAS,4BACX,CAAC,QACCC,GAAW,EACb,GAGFT,GACF,IACC,CAACC,IAEG,CAAExH,WAAU0H,YAAWzH,aAAY4H,YAAWR,QAAOzE,UAAS,C","sources":["application/About/About.tsx","webpack://jaze/./src/components/ui/activityTitleBar/ActivityTitleBar.module.css?0104","webpack://jaze/./src/components/ui/loginCard/LoginCard.module.css?787e","components/ui/loginCard/LoginCard.tsx","components/ui/activityTitleBar/ActivityTitleBar.tsx","webpack://jaze/./src/components/structure/viewFrame/ViewFrame.module.css?eab7","webpack://jaze/./src/components/structure/viewSection/ViewSection.module.css?a8a6","components/structure/viewSection/ViewSection.tsx","components/structure/viewFrame/ViewFrame.tsx","components/views/displayGrid/DisplayGrid.tsx","webpack://jaze/./src/components/views/displayTable/DisplayTable.module.css?a90e","components/views/displayTable/DisplayTable.tsx","hooks/dataManagement/fetchAndProcessData.ts","hooks/dataManagement/API.ts","hooks/dataManagement/fetchUserData.ts"],"sourcesContent":["// File: About.tsx\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faGlobeAmericas,\n  faCalendarAlt,\n  faUserCircle,\n  faMusic,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { ActivityConstructorProps } from \"../../types/structureTypes\";\nimport { fetchUserData } from \"../../hooks/dataManagement/fetchUserData\";\n\nimport DisplayTable from \"../../components/views/displayTable/DisplayTable\";\nimport DisplayPage from \"../../components/views/displayGrid/DisplayGrid\";\n\nconst About: React.FC<ActivityConstructorProps> = ({ userID }) => {\n  const { userData, artistData } = fetchUserData(userID);\n\n  const renderUserInfo = () => {\n    if (!userData || !userData.user) return null;\n    const { user } = userData;\n    const registrationDate = new Date(user.registered.unixtime * 1000);\n    const currentDate = new Date();\n    let yearsSinceRegistration =\n      currentDate.getFullYear() - registrationDate.getFullYear();\n    const monthsDifference =\n      currentDate.getMonth() - registrationDate.getMonth();\n    if (\n      monthsDifference < 0 ||\n      (monthsDifference === 0 &&\n        currentDate.getDate() < registrationDate.getDate())\n    ) {\n      yearsSinceRegistration--;\n    }\n\n    const dataForDisplay = [\n      [\n        <span>\n          <FontAwesomeIcon icon={faUserCircle} /> Name\n        </span>,\n        user.name,\n      ],\n      [\n        <span>\n          <FontAwesomeIcon icon={faGlobeAmericas} /> Country\n        </span>,\n        user.country,\n      ],\n      [\n        <span>\n          <FontAwesomeIcon icon={faCalendarAlt} /> User Since\n        </span>,\n        registrationDate.toLocaleDateString(),\n      ],\n      [\n        <span>\n          <FontAwesomeIcon icon={faCalendarAlt} /> Years Active\n        </span>,\n        `${yearsSinceRegistration} years`,\n      ],\n      [\n        <span>\n          <FontAwesomeIcon icon={faMusic} /> Playcount\n        </span>,\n        Number(user.playcount).toLocaleString(),\n      ],\n    ];\n\n    return <DisplayTable data={dataForDisplay} />;\n  };\n\n  const userInfoElement = renderUserInfo();\n  const aboutDescription = (\n    <div>\n      <h3>About You!</h3>\n      This application generates visual representations of Last.FM data that you\n      have scrobbled over time. Here are some basic facts from your Last.FM\n      profile!\n    </div>\n  );\n  const secondaryContent = (\n    <div>\n      <h3>Old Favorites to Revisit</h3>\n      This application generates visual representations of Last.FM data that you\n      have scrobbled over time. Here are some basic facts from your Last.FM\n      profile!\n    </div>\n  );\n\n  return (\n    <DisplayPage\n      title=\"About\"\n      userID={userID}\n      primaryContent={aboutDescription}\n      primaryContentAnc={userInfoElement}\n      secondaryContent={secondaryContent}\n    />\n  );\n};\n\nexport default About;\n","// extracted by mini-css-extract-plugin\nexport default {\"titleBar\":\"ActivityTitleBar_titleBar__C4F1B\"};","// extracted by mini-css-extract-plugin\nexport default {\"LoginCardContainer\":\"LoginCard_LoginCardContainer__UgDVy\",\"LoginCard\":\"LoginCard_LoginCard__nOMBm\",\"userHeader\":\"LoginCard_userHeader__EGsyM\",\"userImage\":\"LoginCard_userImage__02251\",\"userInfo\":\"LoginCard_userInfo__9N6Ro\",\"SubText\":\"LoginCard_SubText__xaWPu\",\"LoginCardOverlay\":\"LoginCard_LoginCardOverlay__r2UUw\",\"logoutButton\":\"LoginCard_logoutButton__db-YT\"};","import React, { useState } from \"react\";\nimport styles from \"./LoginCard.module.css\";\nimport { fetchUserData } from \"../../../hooks/dataManagement/fetchUserData\";\nimport { useAuthenticator } from \"../../../hooks/security/useAuthenticator\";\n\ninterface LoginCardProps {\n  userID?: string;\n}\n\nconst LoginCard: React.FC<LoginCardProps> = ({ userID }) => {\n  const { userData, loading } = fetchUserData(userID);\n  const { logOut } = useAuthenticator();\n  const userImage = userData?.user?.image?.[0][\"#text\"];\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleClick = () => {\n    logOut();\n  };\n\n  if (loading) {\n    return <div className={styles.userInfo}>Loading...</div>;\n  }\n\n  return (\n    <div\n      className={styles.LoginCardContainer}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className={styles.LoginCardOverlay}></div>\n      {userID ? (\n        <>\n          <div className={styles.LoginCard}>\n            {userImage && (\n              <img src={userImage} alt=\"User\" className={styles.userImage} />\n            )}\n            <div className={styles.userInfo}>\n              <span className={styles.userHeader}>{userID}</span>\n              <br />\n              <span>{userData?.user?.realname}</span>\n              <br />\n              <span className={styles.SubText}>Logged In!</span>\n            </div>\n          </div>\n          {isHovered && (\n            <div className={styles.logoutButton} onClick={handleClick}>\n              Log Out\n            </div>\n          )}\n        </>\n      ) : (\n        <div className={styles.LoginCard}>\n          <span>Nobody Logged in!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LoginCard;\n","// Filename: TitleBar.tsx\nimport React from \"react\";\nimport styles from \"./ActivityTitleBar.module.css\";\nimport LoginCard from \"../loginCard/LoginCard\";\n\ninterface ActivityTitleBarProps {\n  title: string;\n  userID?: string;\n}\n\nconst ActivityTitleBar: React.FC<ActivityTitleBarProps> = ({\n  title,\n  userID,\n}) => {\n  return (\n    <div className={styles.titleBar}>\n      <div>\n        <h2>{title}</h2>\n      </div>\n      <div className={styles.loginCardContainer}>\n        <LoginCard userID={userID} />\n      </div>\n    </div>\n  );\n};\n\nexport default ActivityTitleBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"viewFrame\":\"ViewFrame_viewFrame__x+2Zi\"};","// extracted by mini-css-extract-plugin\nexport default {\"viewSection\":\"ViewSection_viewSection__j9IFc\"};","import React from \"react\";\nimport styles from \"./ViewSection.module.css\";\nimport { ViewSectionProps } from \"types/structureTypes\";\n\nconst ViewSection: React.FC<ViewSectionProps> = ({ children, style }) => {\n  return (\n    <div className={styles.viewSection} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default ViewSection;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport styles from \"src/components/structure/viewFrame/ViewFrame.module.css\";\nimport ViewSection from \"../viewSection/ViewSection\";\nimport { ViewFrameProps } from \"types/structureTypes\";\n\nconst ViewFrame: React.FC<ViewFrameProps> = ({\n  children,\n  splitPercentage = 50,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [adjustedSplit, setAdjustedSplit] = useState(splitPercentage);\n  const validChildren = React.Children.toArray(children).slice(0, 2);\n\n  useEffect(() => {\n    const adjustSplitPercentage = () => {\n      if (containerRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const minChildWidth = 100;\n        const maxChildWidth = 1800;\n        let newSplit = splitPercentage;\n\n        if (containerWidth * (splitPercentage / 100) < minChildWidth) {\n          newSplit = (minChildWidth / containerWidth) * 100;\n        } else if (containerWidth * (splitPercentage / 100) > maxChildWidth) {\n          newSplit = (maxChildWidth / containerWidth) * 100;\n        }\n\n        setAdjustedSplit(newSplit);\n      }\n    };\n\n    adjustSplitPercentage();\n    window.addEventListener(\"resize\", adjustSplitPercentage);\n\n    return () => {\n      window.removeEventListener(\"resize\", adjustSplitPercentage);\n    };\n  }, [splitPercentage]);\n\n  return (\n    <div ref={containerRef} className={styles.viewFrame}>\n      <ViewSection style={{ width: `${adjustedSplit}%` }}>\n        {validChildren[0]}\n      </ViewSection>\n      <ViewSection style={{ width: `${100 - adjustedSplit}%` }}>\n        {validChildren[1]}\n      </ViewSection>\n    </div>\n  );\n};\n\nexport default ViewFrame;\n","import React from \"react\";\nimport TitleBar from \"../../ui/activityTitleBar/ActivityTitleBar\";\nimport ViewFrame from \"../../structure/viewFrame/ViewFrame\";\nimport { ActivityConstructorProps } from \"types/structureTypes\";\n\ninterface DisplayGridProps extends ActivityConstructorProps {\n  primaryContent: React.ReactNode;\n  primaryContentAnc?: React.ReactNode;\n  secondaryContent?: React.ReactNode;\n  secondaryContentAnc?: React.ReactNode;\n  title?: string;\n  primaryWidth?: number;\n  secondaryWidth?: number;\n}\n\nconst DisplayGrid: React.FC<DisplayGridProps> = ({\n  userID,\n  primaryContent,\n  primaryContentAnc,\n  secondaryContent,\n  secondaryContentAnc,\n  title,\n  primaryWidth = 50,\n  secondaryWidth = 50,\n}) => {\n  return (\n    <>\n      <TitleBar userID={userID} title={title} />\n      <section>\n        <ViewFrame splitPercentage={primaryWidth}>\n          {primaryContent}\n          {primaryContentAnc}\n        </ViewFrame>\n        <ViewFrame splitPercentage={secondaryWidth}>\n          {secondaryContent}\n          {secondaryContentAnc}\n        </ViewFrame>\n      </section>\n    </>\n  );\n};\nexport default DisplayGrid;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"DisplayTable_table__qjaBx\",\"cell\":\"DisplayTable_cell__rtsiT\",\"header\":\"DisplayTable_header__mlpob\",\"boldText\":\"DisplayTable_boldText__+64nS\"};","// File: DisplayTable.tsx\nimport React from \"react\";\nimport styles from \"./DisplayTable.module.css\";\n\ntype TableCell = string | JSX.Element;\n\ninterface TableProps {\n  data: TableCell[][];\n}\n\nconst DisplayTable: React.FC<TableProps> = ({ data }) => {\n  if (data.length === 0 || (data.length > 0 && data[0].length === 0)) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {data.map((row, rowIndex) => (\n          <tr key={`row-${rowIndex}`}>\n            {row.map((cell, cellIndex) => (\n              <td\n                key={`cell-${rowIndex}-${cellIndex}`}\n                className={`${styles.cell} ${cellIndex === 0 ? styles.boldText : \"\"}`}\n              >\n                {cell}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DisplayTable;\n","// src/utils/DataHandler.tsx\nimport { fetchData } from \"./API\";\n\nexport const fetchAndProcessData = async (\n  method: string,\n  params: Record<string, string | number | boolean>,\n) => {\n  try {\n    const response = await fetchData(method, params);\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching and processing data:\", error);\n    throw error;\n  }\n};\n","export async function fetchData<T>(\n  method: string,\n  params: Record<string, string | number | boolean>,\n): Promise<T> {\n  const queryParams = new URLSearchParams({\n    ...params,\n    api_key: process.env.REACT_APP_APIKEY!,\n    format: \"json\",\n  }).toString();\n\n  const url = `${process.env.REACT_APP_BASEURL}?method=${method}&${queryParams}`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.statusText}`);\n    }\n    return (await response.json()) as T;\n  } catch (error) {\n    console.error(\"Failed to fetch data:\", error);\n    throw error;\n  }\n}\n\nexport interface FetchDataParams {\n  [key: string]: string | number;\n  user?: string;\n  artist?: string;\n  album?: string;\n  track?: string;\n  autocorrect?: number;\n  page?: number;\n  limit?: number;\n  period?: string;\n  extended?: number;\n  api_key?: string;\n  format?: string;\n}\n","// FileName: useFetchUserData.tsx\n\nimport { useState, useEffect } from \"react\";\nimport { fetchAndProcessData } from \"./fetchAndProcessData\";\nimport { UserData, AlbumData, ArtistData, TrackData } from \"types/dataTypes\";\n\nexport const fetchUserData = (username: string) => {\n  const [userData, setUserData] = useState<UserData | null>(null);\n  const [albumData, setAlbumData] = useState<AlbumData | null>(null);\n  const [artistData, setArtistData] = useState<ArtistData | null>(null);\n  const [trackData, setTrackData] = useState<TrackData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!username) {\n      setLoading(false);\n      return;\n    }\n\n    const localStorageKey = `userData_${username}`;\n    const storedData = localStorage.getItem(localStorageKey);\n\n    if (storedData) {\n      const { userData, albumData, artistData, trackData } =\n        JSON.parse(storedData);\n      setUserData(userData);\n      setAlbumData(albumData);\n      setArtistData(artistData);\n      setTrackData(trackData);\n      setLoading(false);\n    } else {\n      const fetchData = async () => {\n        setLoading(true);\n        try {\n          const userInfoPromise = fetchAndProcessData(\"user.getinfo\", {\n            user: username,\n          });\n          const userTopAlbumsPromise = fetchAndProcessData(\n            \"user.getTopAlbums\",\n            { user: username, limit: 5 },\n          );\n          const userTopArtistsPromise = fetchAndProcessData(\n            \"user.getTopArtists\",\n            { user: username, limit: 5 },\n          );\n          const userTopTracksPromise = fetchAndProcessData(\n            \"user.getTopTracks\",\n            { user: username, limit: 5 },\n          );\n\n          const [userInfo, userTopAlbums, userTopArtists, userTopTracks] =\n            await Promise.all([\n              userInfoPromise,\n              userTopAlbumsPromise,\n              userTopArtistsPromise,\n              userTopTracksPromise,\n            ]);\n\n          setUserData(userInfo as UserData);\n          setAlbumData(userTopAlbums as AlbumData);\n          setArtistData(userTopArtists as ArtistData);\n          setTrackData(userTopTracks as TrackData);\n\n          localStorage.setItem(\n            localStorageKey,\n            JSON.stringify({\n              userData: userInfo,\n              albumData: userTopAlbums,\n              artistData: userTopArtists,\n              trackData: userTopTracks,\n            }),\n          );\n        } catch (error) {\n          console.error(\"Failed to fetch user data\", error);\n          setError(\"Failed to fetch user data\");\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchData();\n    }\n  }, [username]);\n\n  return { userData, albumData, artistData, trackData, error, loading };\n};\n"],"names":["_ref","userID","userData","artistData","fetchUserData","userInfoElement","renderUserInfo","user","registrationDate","Date","registered","unixtime","currentDate","yearsSinceRegistration","getFullYear","monthsDifference","getMonth","getDate","dataForDisplay","_jsxs","children","_jsx","FontAwesomeIcon","icon","faUserCircle","name","faGlobeAmericas","country","faCalendarAlt","toLocaleDateString","concat","faMusic","Number","playcount","toLocaleString","DisplayTable","data","aboutDescription","secondaryContent","DisplayPage","title","primaryContent","primaryContentAnc","_userData$user","_userData$user$image","_userData$user2","loading","logOut","useAuthenticator","userImage","image","isHovered","setIsHovered","useState","className","styles","onMouseEnter","onMouseLeave","_Fragment","src","alt","realname","onClick","handleClick","titleBar","loginCardContainer","LoginCard","style","splitPercentage","containerRef","useRef","adjustedSplit","setAdjustedSplit","validChildren","React","toArray","slice","useEffect","adjustSplitPercentage","current","containerWidth","offsetWidth","minChildWidth","maxChildWidth","newSplit","window","addEventListener","removeEventListener","ref","ViewSection","width","secondaryContentAnc","primaryWidth","secondaryWidth","TitleBar","ViewFrame","length","map","row","rowIndex","cell","cellIndex","fetchAndProcessData","async","method","params","response","queryParams","URLSearchParams","api_key","process","format","toString","url","fetch","ok","Error","statusText","json","error","console","fetchData","username","setUserData","albumData","setAlbumData","setArtistData","trackData","setTrackData","setError","setLoading","localStorageKey","storedData","localStorage","getItem","JSON","parse","userInfoPromise","userTopAlbumsPromise","limit","userTopArtistsPromise","userTopTracksPromise","userInfo","userTopAlbums","userTopArtists","userTopTracks","Promise","all","setItem","stringify"],"sourceRoot":""}